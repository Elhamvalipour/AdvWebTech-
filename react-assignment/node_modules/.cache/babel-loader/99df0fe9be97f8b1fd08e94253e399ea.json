{"ast":null,"code":"import _objectSpread from \"/Users/carawas/Documents/MongoDB Assignment/react-assignment/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/carawas/Documents/MongoDB Assignment/react-assignment/src/components/userModalData.js\";\nimport React, { Component } from \"react\";\nimport UserModal from \"./userModal.js\"; //Small JSX Component exporting a button that changes looks when it's clicked\n\nclass UserModalData extends Component {\n  //Constructor for defining start settings in this.state and binding functions\n  constructor(props) {\n    //properties given to us by other components are connected with \"props\"\n    super(props); //You need to bind a function in the constructor to call it throughout the class\n\n    this.myCallback = this.myCallback.bind(this); //This is were our start settings are defined:\n    //We want our Edit button to show \"off\"/false\n\n    this.state = {\n      isEditing: false,\n      show: false,\n      userInfo: [\"array\", \"default\", \"default\", \"default\"]\n    };\n  }\n\n  myCallback(UserData) {\n    console.log(\"myCallback works\" + UserData);\n    var tempArray = Object.values(UserData);\n    this.setState(prevState => _objectSpread({}, prevState, {\n      cards: _objectSpread({}, prevState.cards, {\n        userInfo: tempArray\n      })\n    }));\n  } //Here is where our HTML-Markup is designed, in this case just our Edit Button\n\n\n  render() {\n    //The value of isEditing is called from the state\n    //Our text is called with this.props;\n    //const{text}= this.props.text;\n    //Here starts our HTML, Javascript is marked with \"{}\" brackets.\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(UserModal, {\n      show: this.show,\n      callbackFromParent: this.myCallback.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Username:\", this.state.userInfo[0], \"Age:\", this.state.userInfo[1], \"Gender:\", this.state.userInfo[2], \"Study Group:\", this.state.userInfo[3]));\n  }\n\n}\n\nexport default UserModalData;","map":{"version":3,"sources":["/Users/carawas/Documents/MongoDB Assignment/react-assignment/src/components/userModalData.js"],"names":["React","Component","UserModal","UserModalData","constructor","props","myCallback","bind","state","isEditing","show","userInfo","UserData","console","log","tempArray","Object","values","setState","prevState","cards","render"],"mappings":";;AAEE,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACF,OAAOC,SAAP,MAAsB,gBAAtB,C,CAEA;;AACA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACpC;AAEAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA,UAAMA,KAAN,EAFiB,CAGjB;;AACA,SAAKC,UAAL,GAAiB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAjB,CAJiB,CAMjB;AACA;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,IAAI,EAAE,KAFK;AAGXC,MAAAA,QAAQ,EAAC,CAAC,OAAD,EAAS,SAAT,EAAmB,SAAnB,EAA6B,SAA7B;AAHE,KAAb;AAKD;;AAEDL,EAAAA,UAAU,CAACM,QAAD,EAAW;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAsBF,QAAlC;AACA,QAAIG,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcL,QAAd,CAAhB;AACA,SAAKM,QAAL,CACEC,SAAS,sBACJA,SADI;AAEPC,MAAAA,KAAK,oBACAD,SAAS,CAACC,KADV;AAEHT,QAAAA,QAAQ,EAAEI;AAFP;AAFE,MADX;AASD,GA9BmC,CAiClC;;;AACFM,EAAAA,MAAM,GAAG;AACP;AAEA;AACA;AACA;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,KAAKX,IAAtB;AAA4B,MAAA,kBAAkB,EAAE,KAAKJ,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAED,KAAKC,KAAL,CAAWG,QAAX,CAAoB,CAApB,CAFC,UAGG,KAAKH,KAAL,CAAWG,QAAX,CAAoB,CAApB,CAHH,aAIM,KAAKH,KAAL,CAAWG,QAAX,CAAoB,CAApB,CAJN,kBAKW,KAAKH,KAAL,CAAWG,QAAX,CAAoB,CAApB,CALX,CAFE,CADF;AAWD;;AAnDmC;;AAsDtC,eAAeR,aAAf","sourcesContent":["\n\n  import React, { Component } from \"react\";\nimport UserModal from \"./userModal.js\";\n\n//Small JSX Component exporting a button that changes looks when it's clicked\nclass UserModalData extends Component {\n  //Constructor for defining start settings in this.state and binding functions\n\n  constructor(props) {\n    //properties given to us by other components are connected with \"props\"\n    super(props);\n    //You need to bind a function in the constructor to call it throughout the class\n    this.myCallback= this.myCallback.bind(this);\n\n    //This is were our start settings are defined:\n    //We want our Edit button to show \"off\"/false\n    this.state = {\n      isEditing: false,\n      show: false,\n      userInfo:[\"array\",\"default\",\"default\",\"default\"]\n    };\n  }\n\n  myCallback(UserData) {\n    console.log(\"myCallback works\" +  UserData);\n    var tempArray = Object.values(UserData);\n    this.setState(\n      prevState => ({\n        ...prevState,\n        cards: {\n          ...prevState.cards,\n          userInfo: tempArray\n        }\n      })\n    );\n  }\n\n\n    //Here is where our HTML-Markup is designed, in this case just our Edit Button\n  render() {\n    //The value of isEditing is called from the state\n\n    //Our text is called with this.props;\n    //const{text}= this.props.text;\n    //Here starts our HTML, Javascript is marked with \"{}\" brackets.\n    return (\n      <div>\n <UserModal show={this.show} callbackFromParent={this.myCallback.bind(this)}/>\n    <p>\nUsername:\n  {this.state.userInfo[0]}\n  Age:{this.state.userInfo[1]}\n  Gender:{this.state.userInfo[2]}\n  Study Group:{this.state.userInfo[3]}</p>\n      </div>\n    );\n  }\n}\n\nexport default UserModalData;"]},"metadata":{},"sourceType":"module"}